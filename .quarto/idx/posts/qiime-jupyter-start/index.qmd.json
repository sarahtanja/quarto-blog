{"title":"Getting Started with `QIIME2` and `Jupyter Lab`","markdown":{"yaml":{"title":"Getting Started with `QIIME2` and `Jupyter Lab`","subtitle":"Working from a Windows OS and connecting via VPN to a remote server","author":"Sarah Tanja","date":"08/10/2023","categories":["code","learning journey"],"draft":false,"toc":true,"toc-title":"Contents <i class=\"bi bi-bookmark-heart\"></i>","toc-depth":5,"toc-location":"left","reference-location":"margin","citation-location":"margin","citation-hover":true,"code-block-border-left":true,"code-block-bg":true,"highlight-style":{"light":"arrow","dark":"arrow-dark"},"link-external-newwindow":true},"headingText":"Step 1. Get setup as a user on a remote Linux server","containsRefs":false,"markdown":"\n\nSometimes it seems the hardest part about developing a new workflow is deciding *where* to put it! As I start working on analyzing my microbiome data, I need to have a Linux OS computing environment with `conda`, [`qiime2`](https://qiime2.org/) all running in a [`jupyter notebook`](https://jupyter.org/).\n\nAfter various tries installing in VirtualBox, uninstalling, re-installing, running into big issues with package dependency conflicts, and [some strange `temporary failure` errors](https://forum.qiime2.org/t/temporary-failure-in-name-resolution-wget-unable-to-resolve-host-address-data-qiime2-org/27193), I finally got things setup to run `qiime2` commands in a `jupyter notebook` on a Linux OS remote server (which has more computing power and space than my PC or laptop).\n\nSo the rest of this post details those steps; in case I ever (God willing) have to do it again or explain it to someone else.\n\n::: {.callout-note title=\"Objective\"}\nRun `qiime2` commands in a `jupyter notebook` on a remote Linux server (from a Windows OS!)\n:::\n\n\nThis may be the hardest part because you are relying on support from your institution or PI (unless you have the ability to setup your own Linux server, which is outside the scope of this post).\n\nIn Spring of 2023 I had taken the [Bioinformatics FISH 546](https://sr320.github.io/course-fish546-2023/schedule.html) taught by Steven Roberts at UW. In that class, I was added as a user to a remote Linux server hosted by the [Roberts Lab](https://robertslab.github.io/resources/). I got permission to continue using the remote server for my Master's Thesis research bioinformatics analysis. So, the Roberts Lab set me up with a username and a password to access the remote server.\n\n## Step 2. Download Windows Subsystem for Linux (WSL) to your Windows OS computer\n\nI followed the instructions found at the Microsoft Documentation website [Install Linux on Windows with WSL](https://learn.microsoft.com/en-us/windows/wsl/install).\n\nIn brief, I opened Windows PowerShell and ran `wsl --install` which installed the Ubuntu Linux distribution. I kept the default Ubuntu distribution. I continued following the instructions to [Set up your Linux user info](https://learn.microsoft.com/en-us/windows/wsl/install#:~:text=use%20with%20WSL.-,Set%20up%20your%20Linux%20user%20info,-Once%20you%20have), and kept my password secret and safe.\n\n## Step 3. Download a VPN Client\n\nAs a student at UW, I have access to some free software through the IT department, and to connect remotely to servers hosted at UW I needed to download the virtual private network (VPN) [Big-IP Edge Client](https://www.lib.washington.edu/help/connect/husky-onnet) to my home PC and my mobile laptop.\n\nSo I followed [these instructions](https://www.lib.washington.edu/help/connect/husky-onnet) to download the BIG-IP Edge Client for UW students, and I did this for both my home PC and laptop. I then connected to the VPN!\n\n::: callout-important\nWhen connected to the VPN Client, make sure the Server selected is 'All Internet Traffic', otherwise Jupyter Lab local host won't connect!\n:::\n\n::: callout-important\nYou do not need to connect to the VPN Client when you are on the same network as the remote server! The VPN Client is only needed when working from home/cafe/or on travel.\n:::\n\n## Step 4. Setup a 'tunnel' into the remote server\n\nI opened the WSL Ubuntu terminal üêß and made a .ssh directory in my home directory, and then opened the nano text editor to write a config file in the .ssh folder:\n\n```{r, engine='bash', eval=FALSE, echo=TRUE}\nmkdir .ssh\nnano ~/.ssh/config\n```\n\n::: callout-tip\nThe .ssh directory is hidden, and you won't see it when you run `ls`\n:::\n\nIn the nano text editor I copied the following:\n\n```{r, engine='bash', eval=FALSE, echo=TRUE}\n    # Jupyter Notebook tunnel\n    Host <server>_tunnel\n        HostName <123.45.678.90>\n        User <username>\n        ControlMaster auto\n        ServerAliveInterval 30\n        ServerAliveCountMax 1200\n        ForwardX11 yes\n        LocalForward localhost:9000 127.0.0.1:9000\n```\n\nwhere:\n\n-   **\\<server\\>** is the remote server name (make this short and sweet, since you will execute this as a command later on and must needs type it out)\n\n-   **\\<123.45.678.90\\>** is the remote server IP address in the HostName field\n\n-   **\\<username**\\> is the username setup for the remote server in the User field\n\nI saved the config file by writing it out (Ctrl+X) and pressing Enter.\n\nNext, I tested the tunnel by opening a new Linux Ubuntu terminal and running:\n\n```{r, engine='bash', eval=FALSE, echo=TRUE}\nssh <server>_tunnel\n```\n\nIn addition, you can test direct access to the remote server (not using the tunnel) with:\n\n```{r, engine='bash', eval=FALSE, echo=TRUE}\nssh <username>@<IP-address>\n```\n\nThe tunnel connected me to the remote server and prompted me to enter the password associated with my user on the remote server.\n\n::: callout-tip\nOnce tunneled into the remote server you'll notice the \\<username\\>\\@\\<server\\> in the terminal changes from your local computer to the remote server.\n:::\n\n## Step 5. Follow QIIME2 Install\n\nI followed the [QIIME2 Install Instructions](https://docs.qiime2.org/2023.5/install/native/) for a native install on a Linux OS. The steps below are taken directly from the `QIIME2` docs instruction on Natively installing `QIIME2` using `Miniconda` on a Linux machine.\n\n### Step 5.1 Install `Miniconda`\n\n[Miniconda](https://docs.conda.io/en/latest/miniconda.html) provides the `conda` environment and package manager, and is the recommended way to install `QIIME 2`. Follow the [Miniconda instructions](https://conda.io/projects/conda/en/latest/user-guide/install/index.html) for downloading and installing `Miniconda`.\n\nHere, I choose to work with `Miniconda3`, because I also have `Python 3`. I am also following [instructions for downloading to a Linux environment](https://conda.io/projects/conda/en/latest/user-guide/install/linux.html).\n\n::: callout-important\nIt is important to follow all of the directions, particularly ensuring that you run `conda init` at the end of the installation process.\n:::\n\nIn the remote server terminal run:\n\n```{r, engine='bash', eval=FALSE, echo=TRUE}\ncurl -O https://repo.anaconda.com/miniconda/Miniconda3-py311_23.5.2-0-Linux-x86_64.sh\n```\n\n### Step 5.2 Install `QIIME2` within a `conda` environment\n\nI continued following the the [QIIME2 Install Instructions](https://docs.qiime2.org/2023.5/install/native/) and, in the remote server terminal ran:\n\n```{r, engine='bash', eval=FALSE, echo=TRUE}\nwget https://data.qiime2.org/distro/core/qiime2-2023.5-py38-linux-conda.yml\nconda env create -n qiime2-2023.5 --file qiime2-2023.5-py38-linux-conda.yml\nrm qiime2-2023.5-py38-linux-conda.yml\n```\n\n### Step 5.3 Activate `conda` environment\n\n```{r, engine='bash', eval=FALSE, echo=TRUE}\nconda activate qiime2-2023.5\n```\n\n### Step 5.4 Test Installation\n\n```{r, engine='bash', eval=FALSE, echo=TRUE}\nqiime --help\n```\n\n## Step 6. Download Jupyter Lab in `QIIME2` `conda` environment\n\nNow that I am operating on the remote server, and within the qiime2 conda environment (what a feat!) I can download `jupyter lab` inside the qiime2-2023.5 env.\n\n```{r, engine='bash', eval=FALSE, echo=TRUE}\nsarahtanja@MINERVA:~$ # I started here\n(base) stanja@raven:~$ # after ssh. into raven_tunnel\n(qiime2-2023.5) stanja@raven:~$ # after conda activate\n```\n\nInstall Jupyter Lab by running:\n\n```{r, engine='bash', eval=FALSE, echo=TRUE}\nconda install -c conda-forge jupyterlab\n```\n\n## Step 7. Enable qiime2 plugins for Python API use\n\n```{r, engine='bash', eval=FALSE, echo=TRUE}\njupyter serverextension enable --py qiime2 --sys-prefix\n```\n\n## Step 7. Review Startup Sequence\n\nIf working from a different network than the remote server, start Big IP-Edge VPN Client and connect to 'All Internet Traffic' server.\n\nOpen Ubuntu Linux terminal\n\nRun `ssh <server>_tunnel` Enter user pasword Run `conda activate qiime2-2023.5` Run `jupyter lab --no-browser --port=9000` Ctrl+Click or Copy&Paste the jupyter lab local host url into a browser window\n\nOpen a new Python 3 (ipykernel) notebook Run `qiime` commands either with Python API or with `!qiime` an exclamation point before bash command line code, Or, like I do, use a combination of both!\n","srcMarkdownNoYaml":"\n\nSometimes it seems the hardest part about developing a new workflow is deciding *where* to put it! As I start working on analyzing my microbiome data, I need to have a Linux OS computing environment with `conda`, [`qiime2`](https://qiime2.org/) all running in a [`jupyter notebook`](https://jupyter.org/).\n\nAfter various tries installing in VirtualBox, uninstalling, re-installing, running into big issues with package dependency conflicts, and [some strange `temporary failure` errors](https://forum.qiime2.org/t/temporary-failure-in-name-resolution-wget-unable-to-resolve-host-address-data-qiime2-org/27193), I finally got things setup to run `qiime2` commands in a `jupyter notebook` on a Linux OS remote server (which has more computing power and space than my PC or laptop).\n\nSo the rest of this post details those steps; in case I ever (God willing) have to do it again or explain it to someone else.\n\n::: {.callout-note title=\"Objective\"}\nRun `qiime2` commands in a `jupyter notebook` on a remote Linux server (from a Windows OS!)\n:::\n\n## Step 1. Get setup as a user on a remote Linux server\n\nThis may be the hardest part because you are relying on support from your institution or PI (unless you have the ability to setup your own Linux server, which is outside the scope of this post).\n\nIn Spring of 2023 I had taken the [Bioinformatics FISH 546](https://sr320.github.io/course-fish546-2023/schedule.html) taught by Steven Roberts at UW. In that class, I was added as a user to a remote Linux server hosted by the [Roberts Lab](https://robertslab.github.io/resources/). I got permission to continue using the remote server for my Master's Thesis research bioinformatics analysis. So, the Roberts Lab set me up with a username and a password to access the remote server.\n\n## Step 2. Download Windows Subsystem for Linux (WSL) to your Windows OS computer\n\nI followed the instructions found at the Microsoft Documentation website [Install Linux on Windows with WSL](https://learn.microsoft.com/en-us/windows/wsl/install).\n\nIn brief, I opened Windows PowerShell and ran `wsl --install` which installed the Ubuntu Linux distribution. I kept the default Ubuntu distribution. I continued following the instructions to [Set up your Linux user info](https://learn.microsoft.com/en-us/windows/wsl/install#:~:text=use%20with%20WSL.-,Set%20up%20your%20Linux%20user%20info,-Once%20you%20have), and kept my password secret and safe.\n\n## Step 3. Download a VPN Client\n\nAs a student at UW, I have access to some free software through the IT department, and to connect remotely to servers hosted at UW I needed to download the virtual private network (VPN) [Big-IP Edge Client](https://www.lib.washington.edu/help/connect/husky-onnet) to my home PC and my mobile laptop.\n\nSo I followed [these instructions](https://www.lib.washington.edu/help/connect/husky-onnet) to download the BIG-IP Edge Client for UW students, and I did this for both my home PC and laptop. I then connected to the VPN!\n\n::: callout-important\nWhen connected to the VPN Client, make sure the Server selected is 'All Internet Traffic', otherwise Jupyter Lab local host won't connect!\n:::\n\n::: callout-important\nYou do not need to connect to the VPN Client when you are on the same network as the remote server! The VPN Client is only needed when working from home/cafe/or on travel.\n:::\n\n## Step 4. Setup a 'tunnel' into the remote server\n\nI opened the WSL Ubuntu terminal üêß and made a .ssh directory in my home directory, and then opened the nano text editor to write a config file in the .ssh folder:\n\n```{r, engine='bash', eval=FALSE, echo=TRUE}\nmkdir .ssh\nnano ~/.ssh/config\n```\n\n::: callout-tip\nThe .ssh directory is hidden, and you won't see it when you run `ls`\n:::\n\nIn the nano text editor I copied the following:\n\n```{r, engine='bash', eval=FALSE, echo=TRUE}\n    # Jupyter Notebook tunnel\n    Host <server>_tunnel\n        HostName <123.45.678.90>\n        User <username>\n        ControlMaster auto\n        ServerAliveInterval 30\n        ServerAliveCountMax 1200\n        ForwardX11 yes\n        LocalForward localhost:9000 127.0.0.1:9000\n```\n\nwhere:\n\n-   **\\<server\\>** is the remote server name (make this short and sweet, since you will execute this as a command later on and must needs type it out)\n\n-   **\\<123.45.678.90\\>** is the remote server IP address in the HostName field\n\n-   **\\<username**\\> is the username setup for the remote server in the User field\n\nI saved the config file by writing it out (Ctrl+X) and pressing Enter.\n\nNext, I tested the tunnel by opening a new Linux Ubuntu terminal and running:\n\n```{r, engine='bash', eval=FALSE, echo=TRUE}\nssh <server>_tunnel\n```\n\nIn addition, you can test direct access to the remote server (not using the tunnel) with:\n\n```{r, engine='bash', eval=FALSE, echo=TRUE}\nssh <username>@<IP-address>\n```\n\nThe tunnel connected me to the remote server and prompted me to enter the password associated with my user on the remote server.\n\n::: callout-tip\nOnce tunneled into the remote server you'll notice the \\<username\\>\\@\\<server\\> in the terminal changes from your local computer to the remote server.\n:::\n\n## Step 5. Follow QIIME2 Install\n\nI followed the [QIIME2 Install Instructions](https://docs.qiime2.org/2023.5/install/native/) for a native install on a Linux OS. The steps below are taken directly from the `QIIME2` docs instruction on Natively installing `QIIME2` using `Miniconda` on a Linux machine.\n\n### Step 5.1 Install `Miniconda`\n\n[Miniconda](https://docs.conda.io/en/latest/miniconda.html) provides the `conda` environment and package manager, and is the recommended way to install `QIIME 2`. Follow the [Miniconda instructions](https://conda.io/projects/conda/en/latest/user-guide/install/index.html) for downloading and installing `Miniconda`.\n\nHere, I choose to work with `Miniconda3`, because I also have `Python 3`. I am also following [instructions for downloading to a Linux environment](https://conda.io/projects/conda/en/latest/user-guide/install/linux.html).\n\n::: callout-important\nIt is important to follow all of the directions, particularly ensuring that you run `conda init` at the end of the installation process.\n:::\n\nIn the remote server terminal run:\n\n```{r, engine='bash', eval=FALSE, echo=TRUE}\ncurl -O https://repo.anaconda.com/miniconda/Miniconda3-py311_23.5.2-0-Linux-x86_64.sh\n```\n\n### Step 5.2 Install `QIIME2` within a `conda` environment\n\nI continued following the the [QIIME2 Install Instructions](https://docs.qiime2.org/2023.5/install/native/) and, in the remote server terminal ran:\n\n```{r, engine='bash', eval=FALSE, echo=TRUE}\nwget https://data.qiime2.org/distro/core/qiime2-2023.5-py38-linux-conda.yml\nconda env create -n qiime2-2023.5 --file qiime2-2023.5-py38-linux-conda.yml\nrm qiime2-2023.5-py38-linux-conda.yml\n```\n\n### Step 5.3 Activate `conda` environment\n\n```{r, engine='bash', eval=FALSE, echo=TRUE}\nconda activate qiime2-2023.5\n```\n\n### Step 5.4 Test Installation\n\n```{r, engine='bash', eval=FALSE, echo=TRUE}\nqiime --help\n```\n\n## Step 6. Download Jupyter Lab in `QIIME2` `conda` environment\n\nNow that I am operating on the remote server, and within the qiime2 conda environment (what a feat!) I can download `jupyter lab` inside the qiime2-2023.5 env.\n\n```{r, engine='bash', eval=FALSE, echo=TRUE}\nsarahtanja@MINERVA:~$ # I started here\n(base) stanja@raven:~$ # after ssh. into raven_tunnel\n(qiime2-2023.5) stanja@raven:~$ # after conda activate\n```\n\nInstall Jupyter Lab by running:\n\n```{r, engine='bash', eval=FALSE, echo=TRUE}\nconda install -c conda-forge jupyterlab\n```\n\n## Step 7. Enable qiime2 plugins for Python API use\n\n```{r, engine='bash', eval=FALSE, echo=TRUE}\njupyter serverextension enable --py qiime2 --sys-prefix\n```\n\n## Step 7. Review Startup Sequence\n\nIf working from a different network than the remote server, start Big IP-Edge VPN Client and connect to 'All Internet Traffic' server.\n\nOpen Ubuntu Linux terminal\n\nRun `ssh <server>_tunnel` Enter user pasword Run `conda activate qiime2-2023.5` Run `jupyter lab --no-browser --port=9000` Ctrl+Click or Copy&Paste the jupyter lab local host url into a browser window\n\nOpen a new Python 3 (ipykernel) notebook Run `qiime` commands either with Python API or with `!qiime` an exclamation point before bash command line code, Or, like I do, use a combination of both!\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"kable","error":false,"eval":true,"cache":null,"freeze":true,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":{"source":true,"toggle":true},"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":true,"link-external-newwindow":true,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","highlight-style":{"light":"arrow","dark":"arrow-dark"},"toc":true,"toc-depth":5,"reference-location":"margin","output-file":"index.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.7.31","editor":"visual","bibliography":["../../references.bib"],"respect-user-color-scheme":true,"theme":{"light":["solar","../../light-theme.css"],"dark":["solar","../../dark-theme.css"]},"page-layout":"article","code-background":true,"toc-title":"Contents <i class=\"bi bi-bookmark-heart\"></i>","toc-location":"left","smooth-scroll":true,"citation-location":"margin","repo-actions":["edit","issue"],"title-block-banner":true,"title":"Getting Started with `QIIME2` and `Jupyter Lab`","subtitle":"Working from a Windows OS and connecting via VPN to a remote server","author":"Sarah Tanja","date":"08/10/2023","categories":["code","learning journey"],"draft":false,"citation-hover":true,"code-block-border-left":true,"code-block-bg":true},"extensions":{"book":{"multiFile":true}}}},"draft":false,"projectFormats":["html"]}