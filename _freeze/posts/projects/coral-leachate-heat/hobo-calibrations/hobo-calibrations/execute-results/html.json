{
  "hash": "0ca26a239f1e46a66ae6ff73e8de3367",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"HOBO logger calibrations\"\nsubtitle: \"Two loggers per temperature bath (2 ambient, 2 hot)\"\ndate: 07/10/2024\ncategories: [protocols, records]\n---\n\n# Background\n\nOn July 10th I calibrated the HOBO logs to a Kessler NIST K750 RTD Thermometer and an apogee instruments underwater quantum flux PAR meter.\n\nEach was a 2 point calibration matching time-stamp to reference instrument read-out.\n\nNIST temp & time\n27.03 , 07/10/2024 10:40:00\n27.26, 07/10/2024 11:00:00\n\nApogee par & time\n1600, 07/10/2024 11:10:00\n760, 07/10/2024 11:40:00\n\n## Inputs \n\n## Outputs\n\n# Setup\n\n\n## Install packages\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nif (\"tidyverse\" %in% rownames(installed.packages()) == 'FALSE') install.packages('tidyverse')\nif (\"broom\" %in% rownames(installed.packages()) == 'FALSE') install.packages('broom')\n```\n:::\n\n\n## Load libraries\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(broom) # for tidy()\n```\n:::\n\n\n## Load HOBO logs\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\namb1_blue <- read.csv(\"Amb1_blue 2024-07-10 13_10_13 HST (Data HST).csv\")\namb1_bluegreen <- read.csv(\"Amb1_bluegreen 2024-07-10 13_10_51 HST (Data HST).csv\")\namb2_orangepink <- read.csv(\"Amb2_orangepink 2024-07-10 11_47_18 HST (Data HST).csv\")\namb2_pink <- read.csv(\"Amb2_pink 2024-07-10 11_48_03 HST (Data HST).csv\")\nhot1_black <- read.csv(\"Hot1_black 2024-07-10 13_09_24 HST (Data HST).csv\")\nhot1_green <- read.csv(\"Hot1_green 2024-07-10 13_08_26 HST (Data HST).csv\")\nhot2_orange <- read.csv(\"Hot2_orange 2024-07-10 11_44_18 HST (Data HST).csv\")\nhot2_yellow <- read.csv(\"Hot2_yellow 2024-07-10 11_46_08 HST (Data HST).csv\")\n```\n:::\n\n\n# References\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Example inputs for temperature calibration\nref_temp <- c(27.03, 27.26)  # NIST temperatures\nref_time_temp <- as.POSIXct(c(\"07/10/2024 10:40:00\", \"07/10/2024 11:00:00\"),\n                            format=\"%m/%d/%Y %H:%M:%S\")\n\n# For PAR calibration\nref_par <- c(1600, 760)\nref_time_par <- as.POSIXct(c(\"07/10/2024 11:10:00\", \"07/10/2024 11:40:00\"),\n                           format=\"%m/%d/%Y %H:%M:%S\")\n\ncal_table <- tibble::tibble(\n  datetime = as.POSIXct(c(\"2024-07-10 10:40:00\", \"2024-07-10 11:00:00\",\n                          \"2024-07-10 11:10:00\", \"2024-07-10 11:40:00\")),\n  ref_temp = c(27.03, 27.26, NA, NA),  # NIST\n  ref_par  = c(NA, NA, 1600, 760)      # Apogee PAR\n)\n```\n:::\n\n\n\n# Format logs\n1. amb1_blue \n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\namb1_blue <- amb1_blue %>% \n  rename(datetime = Date.Time..HST.,\n         temp = Temperature.....C.,\n         lux = Light....lux.) %>%\n  mutate(datetime = as.POSIXct(datetime, format = \"%m/%d/%Y %H:%M:%S\")) %>% \n  mutate(pendent = \"amb1_blue\") %>% \n  select(datetime, temp, lux, pendent) %>% \n  filter(datetime %in% c(ref_time_temp, ref_time_par))\n```\n:::\n\n\n2. amb1_bluegreen\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\namb1_bluegreen <- amb1_bluegreen %>% \n  rename(datetime = Date.Time..HST.,\n         temp = Temperature.....C.,\n         lux = Light....lux.) %>%\n  mutate(datetime = as.POSIXct(datetime, format = \"%m/%d/%Y %H:%M:%S\")) %>% \n  mutate(pendent = \"amb1_bluegreen\") %>% \n  select(datetime, temp, lux, pendent) %>% \n  filter(datetime %in% c(ref_time_temp, ref_time_par))\n```\n:::\n\n\n3. amb2_orangepink\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\namb2_orangepink <- amb2_orangepink %>% \n  rename(datetime = Date.Time..HST.,\n         temp = Temperature.....C.,\n         lux = Light....lux.) %>%\n  mutate(datetime = as.POSIXct(datetime, format = \"%m/%d/%Y %H:%M:%S\")) %>% \n  mutate(pendent = \"amb2_orangepink\") %>% \n  select(datetime, temp, lux, pendent) %>% \n  filter(datetime %in% c(ref_time_temp, ref_time_par))\n```\n:::\n\n\n4. amb2_pink\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\namb2_pink <- amb2_pink %>% \n  rename(datetime = Date.Time..HST.,\n         temp = Temperature.....C.,\n         lux = Light....lux.) %>%\n  mutate(datetime = as.POSIXct(datetime, format = \"%m/%d/%Y %H:%M:%S\")) %>% \n  mutate(pendent = \"amb2_pink\") %>% \n  select(datetime, temp, lux, pendent) %>% \n  filter(datetime %in% c(ref_time_temp, ref_time_par))\n```\n:::\n\n\n5. hot1_black\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nhot1_black <- hot1_black %>% \n  rename(datetime = Date.Time..HST.,\n         temp = Temperature.....C.,\n         lux = Light....lux.) %>%\n  mutate(datetime = as.POSIXct(datetime, format = \"%m/%d/%Y %H:%M:%S\")) %>% \n  mutate(pendent = \"hot1_black\") %>% \n  select(datetime, temp, lux, pendent) %>% \n  filter(datetime %in% c(ref_time_temp, ref_time_par))\n```\n:::\n\n\n6. hot1_green\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nhot1_green <- hot1_green %>% \n  rename(datetime = Date.Time..HST.,\n         temp = Temperature.....C.,\n         lux = Light....lux.) %>%\n  mutate(datetime = as.POSIXct(datetime, format = \"%m/%d/%Y %H:%M:%S\")) %>% \n  mutate(pendent = \"hot1_green\") %>% \n  select(datetime, temp, lux, pendent) %>% \n  filter(datetime %in% c(ref_time_temp, ref_time_par))\n```\n:::\n\n\n7. hot2_orange\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nhot2_orange <- hot2_orange %>% \n  rename(datetime = Date.Time..HST.,\n         temp = Temperature.....C.,\n         lux = Light....lux.) %>%\n  mutate(datetime = as.POSIXct(datetime, format = \"%m/%d/%Y %H:%M:%S\")) %>% \n  mutate(pendent = \"hot2_orange\") %>% \n  select(datetime, temp, lux, pendent)%>% \n  filter(datetime %in% c(ref_time_temp, ref_time_par))\n```\n:::\n\n\n8. hot2_yellow\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\nhot2_yellow <- hot2_yellow %>% \n  rename(datetime = Date.Time..HST.,\n         temp = Temperature.....C.,\n         lux = Light....lux.) %>%\n  mutate(datetime = as.POSIXct(datetime, format = \"%m/%d/%Y %H:%M:%S\")) %>% \n  mutate(pendent = \"hot2_yellow\") %>% \n  select(datetime, temp, lux, pendent) %>% \n  filter(datetime %in% c(ref_time_temp, ref_time_par))\n```\n:::\n\n\nBind logs \n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\ncal_logs <- rbind(amb1_blue,\n                  amb1_bluegreen,\n                  amb2_orangepink,\n                  amb2_pink,\n                  hot1_black,\n                  hot1_green,\n                  hot2_orange,\n                  hot2_yellow)\n```\n:::\n\n\n\n# Create calibrations\n## Temp\nFor each sensor, calculate slope and intercept using the two point calibration\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Define your calibration temperature reference times\ncal_temp_times <- as.POSIXct(c(\"2024-07-10 10:40:00\", \"2024-07-10 11:00:00\"))\n\n# Sample dataframe 'cal_logs' containing datetime, temp, lux, pendent\n\n# Step 1: Filter calibration temp points only\ntemp_cal_points <- cal_logs %>%\n  filter(datetime %in% cal_temp_times) %>%\n  select(pendent, datetime, temp) %>%\n  mutate(ref_temp = ifelse(datetime == cal_temp_times[1], 27.03, 27.26))\n\n# Step 2: Group by sensor and fit linear model temp ~ ref_temp\ntemp_fit_results <- temp_cal_points %>%\n  group_by(pendent) %>%\n  summarise(\n    model = list(lm(ref_temp ~ temp, data = cur_data()))\n  ) %>%\n  mutate(\n    coef = map(model, tidy)\n  ) %>%\n  unnest(coef) %>%\n  select(pendent, term, estimate) %>%\n  pivot_wider(names_from = term, values_from = estimate) %>%\n  rename(intercept = `(Intercept)`, slope = temp)\n\n# fit_results now contains one row per sensor with slope and intercept ready to use\nprint(temp_fit_results)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 × 3\n  pendent         intercept slope\n  <chr>               <dbl> <dbl>\n1 amb1_blue            19.8 0.256\n2 amb1_bluegreen       19.1 0.284\n3 amb2_orangepink      18.2 0.315\n4 amb2_pink            19.1 0.284\n5 hot1_black           19.5 0.271\n6 hot1_green           18.3 0.315\n7 hot2_orange          19.5 0.267\n8 hot2_yellow          17.6 0.338\n```\n\n\n:::\n:::\n\nAverage temp calibration\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\navg_temp <- temp_fit_results %>%\n  summarize(\n    avg_temp_intercept = mean(intercept),\n    avg_temp_slope = mean(slope))\n\navg_temp\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n| avg_temp_intercept| avg_temp_slope|\n|------------------:|--------------:|\n|           18.89328|      0.2912324|\n\n</div>\n:::\n:::\n\n\n## PAR\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\n# Define your calibration PAR reference times\ncal_par_times <- as.POSIXct(c(\"2024-07-10 11:10:00\", \"2024-07-10 11:40:00\"))\n\n# Sample dataframe 'cal_logs' containing datetime, temp, lux, pendent\n\n# Step 1: Filter calibration par points only\npar_cal_points <- cal_logs %>%\n  filter(datetime %in% cal_par_times) %>%\n  select(pendent, datetime, lux) %>%\n  mutate(ref_par = ifelse(datetime == cal_par_times[1], 1600, 760))\n\n# Step 2: Group by sensor and fit linear model lux ~ ref_par\npar_fit_results <- par_cal_points %>%\n  group_by(pendent) %>%\n  summarise(\n    model = list(lm(ref_par ~ lux, data = cur_data()))\n  ) %>%\n  mutate(\n    coef = map(model, tidy)\n  ) %>%\n  unnest(coef) %>%\n  select(pendent, term, estimate) %>%\n  pivot_wider(names_from = term, values_from = estimate) %>%\n  rename(intercept = `(Intercept)`, slope = lux)\n\n# fit_results now contains one row per sensor with slope and intercept ready to use\nprint(par_fit_results)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 × 3\n  pendent         intercept  slope\n  <chr>               <dbl>  <dbl>\n1 amb1_blue          -1400. 0.0626\n2 amb1_bluegreen     -1428. 0.0727\n3 amb2_orangepink     -776. 0.0573\n4 amb2_pink          -4905. 0.158 \n5 hot1_black         -1427. 0.0697\n6 hot1_green         -1797. 0.0868\n7 hot2_orange        -1968. 0.0805\n8 hot2_yellow        -1998. 0.0957\n```\n\n\n:::\n:::\n\nAverage PAR calibration\n\n::: {.cell layout-align=\"center\"}\n\n```{.r .cell-code}\navg_par <- par_fit_results %>%\n  summarize(\n    avg_par_intercept = mean(intercept),\n    avg_par_slope = mean(slope))\n\navg_par\n```\n\n::: {.cell-output-display}\n<div class=\"kable-table\">\n\n| avg_par_intercept| avg_par_slope|\n|-----------------:|-------------:|\n|         -1962.403|     0.0853845|\n\n</div>\n:::\n:::\n\n\n\n# Apply calibrations\n\nTo apply the intercept and slope from your linear regression calibration to raw data and generate calibrated values, you use the formula:\n\n$$\n\\text{Calibrated value} = (\\text{slope} \\times \\text{raw value}) + \\text{intercept}\n$$\n\n\n# Summary\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}