{
  "hash": "612c86161b69a87f1415f041aa1dc4e4",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Workflow with Git\"\nsubtitle: \"For all the times I accidentally commit a file that is too big\"\nauthor: \"Sarah Tanja\"\ndate: 2023-11-05\ndate-format: long\ndate-modified: today\ncategories: [workflow]\ndraft: false\n---\n\n# Setup for .gitignore\n\n**`.gitignore` cannot filter files by size** — it only filters by **path patterns**, like filenames, extensions, or directory names. It doesn’t support dynamic criteria like file size, modification time, etc.\n\nAn example template for a `.gitignore` while working with large bioinformatics files:\n\n```         \n.Rproj.user \n.Rhistory \n.RData \n.Ruserdata \n.bashvars \n*.bam\n*.sam \n*.fastq\n*.fq\n*.fastq.gz\n*.fq.gz \n*.fasta\n*.fa \n*.gff3\n```\n\n# Normal routine for git push\n\n1.  `git status` : check on staged, not staged, and untracked files\n2.  `find . -type f -size -50M -exec git add {} +`\n    1.  `find .`: Starts the search from the current directory.\n    2.  `-type f`: Finds only files (not directories).\n    3.  `-size -50M`: Limits the size to files smaller than 50 megabytes.\n    4.  `-exec git add {} +`: Executes the `git add` command on all found files, adding them to the Git staging area.\n3.  `git status` : run again to double check staged, not staged, and untracked files\n4.  `git commit -m \"your message here\"`\n5.  `git pull` : merge if needed, see [Write & quit vim during a merge](#write-quit-vim-during-a-merge)\n6.  `git push`\n\n# Write & quit vim during a merge {#write-quit-vim-during-a-merge}\n\n1.  Press `INS` key to insert text, write a short message about the merge\n\n2.  Press `Esc` to make sure you're in **normal mode**.\n\n3.  Type `:` to enter **command mode**.\n\n4.  Then type `wq` and press `Enter`\n\n# Setup git hooks to automatically gitignore large files\n\nWe can use built-in hooks to automatically ignore files larger than 100 MB (no matter the directory or file name!). Here are the steps to follow:\n\n-   Create a new text file in the `.git/hooks/` directory of your repository called `pre-commit`\n\n-   Select the `More` tab with the gear icon under the RStudio Files navigator bar and select `show hidden files` to see the `.git` folder.\n\n-   Add the following text to the `.git/hooks/pre-commit` file:\n\n```         \n#!/bin/sh\n\n# Maximum file size (in bytes)\nmax_file_size=104857600\n\n# Find all files larger than max_file_size and add them to the .gitignore file\nfind . -type f -size +$max_file_size -exec echo \"{}\" >> .gitignore \\;\n```\n\nThis code sets the `max_file_size` variable to 100 MB and then uses the find command to locate all files in the repository that are larger than the specified `max_file_size`. The exec option of the find command appends the name of each file that matches the criteria to the `.gitignore` file.\n\nor\n\n#!/bin/bash\n\necho \"automatically ignoring large files\" find . -size 5M \\| sed 's\\|\\^./\\|\\|g' \\>\\> .gitignore cat .gitignore \\| sort \\| uniq \\> .gitignore\n\ngit diff --exit-code .gitignore exit_status=\\$? if \\[ \\$exit_status -eq 1 \\] then set +e for i in `cat .gitignore` do set +e git rm --cached \\$i done\n\n```         \ngit add .gitignore\ngit commit .gitignore --no-verify -m \"ignoring large files\"\n\necho \"ignored new large files\"\n```\n\n> It is pretty brute force and the downside is that in case there were new large files added by the git hook, the origin commit fails because the state (hash) changed. So you need to execute another commit to actually commit what you have staged. Consider this as a feature telling you that new large files were detected ;-)\n\nSave the pre-commit file and make it executable by running the following command in Terminal from your base git directory:\n\n```         \nchmod +x .git/hooks/pre-commit\n```\n\nWith these changes, whenever you run a git commit command, Git will first execute the pre-commit hook, which will automatically add any files larger than 100 MB to the .gitignore file. This will prevent Git from tracking these files in the repository going forward.\n\n# Manually execute code to find and add files \\>1G to .gitignore before committing\n\nUse the following code as a bash terminal command to find and add files \\>1G from repo to .gitignore `find . -size +1G | sed 's|^./||g' | cat >> .gitignore` from [THIS](https://github.com/sr320/course-fish546-2015/issues/43) Robert's Lab Course Issue\n\n## Using **`git revert`**:\n\n```         \n-   Open your terminal or command prompt.\n\n-   Navigate to the repository directory using the **`cd`** command.\n\n-   Execute the following command to revert the most recent commit:\n\n    `git revert HEAD`\n\n-   Git will create a new commit that undoes the changes introduced by the previous commit. A text editor will open for you to provide a commit message. Save and close the editor to complete the revert process.\n```\n\n## Using **`git reset`**\n\n```         \n-   Open your terminal or command prompt.\n\n-   Navigate to the repository directory using the **`cd`** command.\n\n-   Execute the following command to reset the repository to the commit before the most recent one:\n\n    `git reset HEAD~1`\n\n    This command moves the branch pointer to the commit before the most recent one, effectively undoing the last commit.\n\n-   Note that the changes introduced in the undone commit will still be present in your working directory. You can then modify or discard them as needed.\n```\n\nPlease exercise caution when using these commands, as they modify the Git history. If you have already pushed the commit you want to undo to a remote repository, it's generally not recommended to modify the history, as it can cause conflicts for other team members. In that case, it may be better to consider reverting the changes in a new commit and pushing that instead.\n\n# Make a backup and use `rsync`\n\nIf you've made lots of changes along with the large file commit that you don't want to redo, the best option is to make a backup of your local directory, re-clone the remote git repo, and then use `rsync` to copy over all your local changes minus the `.git` folder with its history...\n\n1.  Turn your local directory into a backup\n\n    `mv git-repo git-repo-BU`\n\n2.  Clone the clean repo from GitHub\n\n    `git clone https://github.com/sarahtanja/git-repo.git`\n\n3.  Restore large files using `rsync` , excluding .`git`\n\n    `rsync -av --progress --exclude='.git/' git-repo-BU/ git-repo/`\n\n4.  \n\n# Burn it down with `git reset –hard`\n\n::: callout-warning\n⚠️**warning this will overwrite any changes you made after your last successful push**⚠️\n:::\n\n> If you still want to continue, you can un-comment the code and follow this instruction:\n>\n> 1.  Update all `origin/<branch>` refs to latest:\n>\n\n> ::: {.cell}\n> \n> ```{.bash .cell-code}\n> #git fetch --all\n> ```\n> :::\n\n>\n> 2.  Backup your current branch (e.g. `master`):\n>\n\n> ::: {.cell}\n> \n> ```{.bash .cell-code}\n> #git branch backup-branch\n> ```\n> :::\n\n>\n> 3.  Jump to the latest commit on `origin/master` :\n>\n\n> ::: {.cell}\n> \n> ```{.bash .cell-code}\n> #git reset --hard origin/main\n> ```\n> :::\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}